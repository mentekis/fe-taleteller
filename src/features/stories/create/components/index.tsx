import {
    Alert,
    AlertDescription,
    AlertTitle,
    Button,
    Popover,
    PopoverContent,
    PopoverTrigger,
    Textarea,
} from "@/components/ui";
import { simulateFetch } from "@/lib/fetch";
import { AlertCircle } from "lucide-react";
import { ChangeEvent, useEffect, useState } from "react";
import { StoryLayout } from "./layout.story";

export const StoryCreateForm = () => {
    // Hooks

    // State
    const [openPopOver, setOpenPopOver] = useState<boolean>(false);
    const [storyInitializer, setStoryInitializer] = useState<string>("");
    const [error, setError] = useState<string>("");
    const [isLoading, setIsLoading] = useState<boolean>(false);

    // Side effect
    useEffect(() => {
        // Simulate fetch
        async function init() {
            const initializer = await simulateFetch<string>(
                "Hello world",
                2000
            );

            setStoryInitializer(initializer);
        }

        init();

        setTimeout(() => {
            setOpenPopOver(true);
        }, 2000);
    }, []);

    // Function
    function handleChangeInitializer(e: ChangeEvent<HTMLTextAreaElement>) {
        if (openPopOver) {
            setOpenPopOver(false);
        }

        setStoryInitializer(e.currentTarget.value);
    }

    async function handleSubmitPremise() {
        setError("");

        if (storyInitializer == "") {
            setError("Please write something");
            return;
        }

        setIsLoading(true);

        await simulateFetch(storyInitializer, 2000);

        setIsLoading(false);
    }

    return (
        <StoryLayout>
            {/* Story initializer */}
            <div className="flex h-full w-full items-center justify-center">
                <div className="w-[500px] space-y-3 rounded-md border border-black p-5">
                    <h3 className="text-center">Your story begin here</h3>

                    {/* Alert */}
                    {error && (
                        <Alert variant={"destructive"}>
                            <AlertCircle className="h-4 w-4" />
                            <AlertTitle>Oops..</AlertTitle>
                            <AlertDescription>{error}</AlertDescription>
                        </Alert>
                    )}

                    <div className="relative">
                        <Textarea
                            placeholder={
                                storyInitializer == ""
                                    ? "Write your story here..."
                                    : storyInitializer
                            }
                            onChange={handleChangeInitializer}
                            value={storyInitializer}
                        />

                        <div className="absolute bottom-0">
                            <Popover
                                open={openPopOver}
                                onOpenChange={setOpenPopOver}
                            >
                                <PopoverTrigger disabled></PopoverTrigger>
                                <PopoverContent className="space-y-3">
                                    <h4>Generated by AI</h4>
                                    <p className="text-sm">
                                        You can customize this story premise or
                                        create your own story initializer. Just
                                        write on the text area
                                    </p>
                                    <Button
                                        size={"sm"}
                                        onClick={() => setOpenPopOver(false)}
                                    >
                                        Alright! I'm understand
                                    </Button>
                                </PopoverContent>
                            </Popover>
                        </div>
                    </div>

                    <Button
                        className="w-full"
                        onClick={handleSubmitPremise}
                        disabled={isLoading}
                    >
                        {isLoading ? "Loading..." : "Let's Go"}
                    </Button>
                </div>
            </div>
        </StoryLayout>
    );
};
